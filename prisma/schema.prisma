// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
  OUTSOURCER
}

enum PostType {
  PUBLIC
  ShowCasePost
  NORMAL_GIG
  PRIVTE
  CONTRACT
  INTERNSHIP
  FULLTIME
  PARTTIME
  REMOTE
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  username       String?
  firstName      String?
  lastName       String?
  skills         String[]
  profilePicture String?
  clerkId        String         @unique
  type           UserType       @default(USER)
  POST           PostHack[]
  ShowCasePost   ShowCasePost[]
  Comments       Comments[]
  connect        Connects[]
  submittions    Submittions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Connects {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
  userId       String @db.ObjectId
  connectcount Int    @default(10)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostHack {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  type        PostType      @default(NORMAL_GIG)
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  dateline    DateTime
  stage       stage[]
  Submittions Submittions[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
}

model stage {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  submittions Submittions[]
  post        PostHack      @relation(fields: [postId], references: [id])
  postId      String        @db.ObjectId
}

model Submittions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  post      PostHack @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  stage     stage    @relation(fields: [stageId], references: [id])
  stageId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ShowCasePost {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  type      PostType   @default(ShowCasePost)
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  Comments  Comments[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Comments {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  message        String
  updatedAt      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  showCasePost   ShowCasePost @relation(fields: [showCasePostId], references: [id])
  showCasePostId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
}
