// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
  OUTSOURCER
}

enum PostType {
  PUBLIC
  ShowCasePost
  NORMAL_GIG
  PRIVTE
  CONTRACT
  INTERNSHIP
  FULLTIME
  PARTTIME
  REMOTE
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  firstName    String?
  lastName     String?
  skills       String[]
  clerkId      String
  type         UserType       @default(USER)
  POST         PostHack[]
  ShowCasePost ShowCasePost[]
  Comments     Comments[]
}

model PostHack {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      PostType @default(NORMAL_GIG)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  dateline  DateTime
  Stages    Stages[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Stages {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String
  post    PostHack @relation(fields: [postId], references: [id])
  postId  String   @db.ObjectId
}

model ShowCasePost {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      PostType   @default(ShowCasePost)
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  Comments  Comments[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Comments {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  message        String
  updatedAt      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  showCasePost   ShowCasePost @relation(fields: [showCasePostId], references: [id])
  showCasePostId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
}
