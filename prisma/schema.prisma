generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
  OUTSOURCER
  NONE
}

enum PostType {
  ShowCasePost
  NORMAL_GIG
  CONTRACT
  INTERNSHIP
  FULLTIME
  PARTTIME
  REMOTE
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  SUBCRIPTIONS
  BUY_CONNECTS
  REFUND
}

model User {
  id             String                        @id @default(auto()) @map("_id") @db.ObjectId
  email          String                        @unique
  username       String?
  firstName      String?
  lastName       String?
  skills         String[]
  profilePicture String?
  clerkId        String                        @unique
  visible        Boolean                       @default(false)
  type           UserType                      @default(USER)
  POST           PostHack[]
  ShowCasePost   ShowCasePost[]
  Comments       Comments[]
  connect        Connects[]
  submittions    Submittions[]
  transaction    OutSourcerTransactionStamps[]
  likes          Likes[]
  messages       Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Likes {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  post      ShowCasePost @relation(fields: [postId], references: [id])
  postId    String       @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  message        String
  imageurl       String[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  usersIds  String[]  @unique
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Connects {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
  userId       String @db.ObjectId
  connectcount Int    @default(10)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostHack {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  type        PostType      @default(NORMAL_GIG)
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  dateline    DateTime
  stage       stage[]
  Submittions Submittions[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
}

model stage {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  submittions Submittions[]
  post        PostHack      @relation(fields: [postId], references: [id])
  postId      String        @db.ObjectId
}

model Submittions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  post      PostHack @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  stage     stage    @relation(fields: [stageId], references: [id])
  stageId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ShowCasePost {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  type        PostType   @default(ShowCasePost)
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  images      String[]
  deployedUrl String
  githubUrl   String
  likescount  Int        @default(0)
  Comments    Comments[]
  likes       Likes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Comments {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  message        String
  updatedAt      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  showCasePost   ShowCasePost @relation(fields: [showCasePostId], references: [id])
  showCasePostId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
}

model OutSourcerTransactionStamps {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  user         User            @relation(fields: [userId], references: [id])
  userId       String          @db.ObjectId
  amount       Int
  transactType TransactionType @default(DEPOSIT)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
